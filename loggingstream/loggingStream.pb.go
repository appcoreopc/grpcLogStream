// Code generated by protoc-gen-go. DO NOT EDIT.
// source: loggingStream.proto

package logginStream

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type LogRequest struct {
	Logfile              string   `protobuf:"bytes,1,opt,name=logfile,proto3" json:"logfile,omitempty"`
	Filter               string   `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogRequest) Reset()         { *m = LogRequest{} }
func (m *LogRequest) String() string { return proto.CompactTextString(m) }
func (*LogRequest) ProtoMessage()    {}
func (*LogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_loggingStream_84304f2e93f1a949, []int{0}
}
func (m *LogRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogRequest.Unmarshal(m, b)
}
func (m *LogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogRequest.Marshal(b, m, deterministic)
}
func (dst *LogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRequest.Merge(dst, src)
}
func (m *LogRequest) XXX_Size() int {
	return xxx_messageInfo_LogRequest.Size(m)
}
func (m *LogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogRequest proto.InternalMessageInfo

func (m *LogRequest) GetLogfile() string {
	if m != nil {
		return m.Logfile
	}
	return ""
}

func (m *LogRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

// The response message containing the greetings
type LogResponse struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	CreateAt             string   `protobuf:"bytes,2,opt,name=createAt,proto3" json:"createAt,omitempty"`
	Content              string   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Status               int32    `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogResponse) Reset()         { *m = LogResponse{} }
func (m *LogResponse) String() string { return proto.CompactTextString(m) }
func (*LogResponse) ProtoMessage()    {}
func (*LogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_loggingStream_84304f2e93f1a949, []int{1}
}
func (m *LogResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogResponse.Unmarshal(m, b)
}
func (m *LogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogResponse.Marshal(b, m, deterministic)
}
func (dst *LogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogResponse.Merge(dst, src)
}
func (m *LogResponse) XXX_Size() int {
	return xxx_messageInfo_LogResponse.Size(m)
}
func (m *LogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogResponse proto.InternalMessageInfo

func (m *LogResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *LogResponse) GetCreateAt() string {
	if m != nil {
		return m.CreateAt
	}
	return ""
}

func (m *LogResponse) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *LogResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*LogRequest)(nil), "logginStream.LogRequest")
	proto.RegisterType((*LogResponse)(nil), "logginStream.LogResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LoggingStreamClient is the client API for LoggingStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoggingStreamClient interface {
	// Sends a greeting
	SendLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
}

type loggingStreamClient struct {
	cc *grpc.ClientConn
}

func NewLoggingStreamClient(cc *grpc.ClientConn) LoggingStreamClient {
	return &loggingStreamClient{cc}
}

func (c *loggingStreamClient) SendLog(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/logginStream.LoggingStream/SendLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggingStreamServer is the server API for LoggingStream service.
type LoggingStreamServer interface {
	// Sends a greeting
	SendLog(context.Context, *LogRequest) (*LogResponse, error)
}

func RegisterLoggingStreamServer(s *grpc.Server, srv LoggingStreamServer) {
	s.RegisterService(&_LoggingStream_serviceDesc, srv)
}

func _LoggingStream_SendLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggingStreamServer).SendLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logginStream.LoggingStream/SendLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggingStreamServer).SendLog(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoggingStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logginStream.LoggingStream",
	HandlerType: (*LoggingStreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendLog",
			Handler:    _LoggingStream_SendLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loggingStream.proto",
}

func init() { proto.RegisterFile("loggingStream.proto", fileDescriptor_loggingStream_84304f2e93f1a949) }

var fileDescriptor_loggingStream_84304f2e93f1a949 = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x09, 0x94, 0x16, 0x0e, 0x10, 0x92, 0x91, 0x90, 0x29, 0x4b, 0x95, 0xa9, 0x93, 0x85,
	0x60, 0x47, 0xd0, 0x89, 0x21, 0x43, 0x49, 0x07, 0xe6, 0x90, 0x5e, 0x4d, 0xa4, 0xab, 0xcf, 0xd8,
	0x57, 0x01, 0xff, 0x1e, 0x39, 0x49, 0xa1, 0x43, 0xb7, 0xf7, 0xdd, 0xe9, 0xe9, 0xdd, 0x3b, 0xb8,
	0x22, 0xb6, 0xb6, 0x71, 0x76, 0x21, 0x01, 0xab, 0xb5, 0xf1, 0x81, 0x85, 0xd5, 0x79, 0x37, 0xec,
	0x66, 0xf9, 0x23, 0x40, 0xc1, 0xb6, 0xc4, 0xcf, 0x0d, 0x46, 0x51, 0x1a, 0x46, 0xc4, 0x76, 0xd5,
	0x10, 0xea, 0x6c, 0x92, 0x4d, 0x4f, 0xcb, 0x2d, 0xaa, 0x6b, 0x18, 0xae, 0x1a, 0x12, 0x0c, 0xfa,
	0xb0, 0x5d, 0xf4, 0x94, 0x33, 0x9c, 0xb5, 0xfe, 0xe8, 0xd9, 0x45, 0x54, 0x0a, 0x06, 0xf2, 0xe3,
	0xb7, 0xee, 0x56, 0xab, 0x31, 0x9c, 0xd4, 0x01, 0x2b, 0xc1, 0x67, 0xe9, 0xcd, 0x7f, 0x9c, 0x02,
	0x6b, 0x76, 0x82, 0x4e, 0xf4, 0x51, 0x17, 0xd8, 0x63, 0x0a, 0x8c, 0x52, 0xc9, 0x26, 0xea, 0xc1,
	0x24, 0x9b, 0x1e, 0x97, 0x3d, 0xdd, 0xbf, 0xc2, 0x45, 0xb1, 0xdb, 0x4a, 0x3d, 0xc1, 0x68, 0x81,
	0x6e, 0x59, 0xb0, 0x55, 0xda, 0xec, 0x76, 0x33, 0xff, 0xc5, 0xc6, 0x37, 0x7b, 0x36, 0xdd, 0xc9,
	0xf9, 0xc1, 0xec, 0x0e, 0x6e, 0x1b, 0x36, 0x36, 0xf8, 0xda, 0xe0, 0x77, 0xb5, 0xf6, 0x84, 0xd1,
	0x7c, 0x20, 0x11, 0x7f, 0x71, 0xa0, 0xe5, 0xec, 0xf2, 0x25, 0xe9, 0xb7, 0xa4, 0xe7, 0xe9, 0x83,
	0xf3, 0xec, 0x7d, 0xd8, 0xbe, 0xf2, 0xe1, 0x37, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x69, 0xd2, 0xad,
	0x61, 0x01, 0x00, 0x00,
}
